1. git 시작하기

 - git init : 현재 작업 중인 디렉토리를 working directory로 만든다. 특징으로는 .git라는 디렉토리가
	      숨김으로 생성된다.
 - git config user.name "codeit" : 현재 사용자의 아이디를 codeit으로 설정
 - git config user.email "codeit@codeit.kr" : 현재 사용자의 이메일 주소를 codeit@codeit.kr로 설정
 
 - git add [파일이름] : working directory안에 있는 수정사항이 있는 특정 파일을 staging area에 올린다.
 - git add [디렉토리명] : working directory안에 있는 수정사항이 있는 특정 폴더와
                                          아래의 모든 파일들을 staging area에 올린다.
 - git add . : working directory안에 있는 모든 수정사항이 있는 파일을 staging area에 올린다.
 - git reset [파일이름] : staging area에 올렸던 파일을 다시 내린다.
 - git status : Git이 현재 인식하고 있는 프로젝트 관련 내용을 출력한다.
 
 - git commit -m "커밋메시지" : 현제 git add 되어 staging area에 있는 것들을 커밋으로 넘긴다.
 - git help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 매뉴얼 출력. 
 - git push -u origin main : 내 컴퓨터에 있는 즉, 로컬 레포지토리의 내용을 맨 처음
                                                리모트 레포지토리(예.github)에 올릴 때 사용 한다.
 - git push : 처음이 올리는 경우가 아닐 때 로컬 레포지토리의 내용을 리모트 레포지토리에 보낸다.
 - git pull : 리모트 레포지토리의 내용을 로컬 레포지토리로 가져온다.
 - git clone [프로젝트 Github 상 주소] : Github에 있는 프로젝트를 내 컴퓨터로 가져온다.



2. git commit 다루기

 - git log : 커밋 히스토리를 출력
 - git log --pretty=oneline : 커밋 히스토리를 출력하는데 pretty옵션을 넣어 다양한 방식으로 출력가능
                                                  oneline으로 각 커밋 히스토리를 한 줄로 출력
 - git show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인
                          커밋 아이디는 git log로 커밋 히스토리에서 확인 가능
 - git commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦.
 - git commit alias.[별명] [커맨드] : 길이가 길어 쓰기 귀찮은 커맨들에 별명을 붙여 해당 별명으로
                                                             커맨드 실행 가능
 - git diff [커밋 A아이디] [커밋 B아이디] : 두 커밋 간의 차이 비교
 - git reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐.
                                 (옵션 생략시 자동적으로 --mixed 옵션이 적용 됨)
                                  특정 커밋아이디 대신 HEAD^(현재 커밋의 바로 전 커밋)이나,
                                                         HEAD~3(현재 커밋의 3단계 이전 커밋)도 사용가능
             1. HEAD가 특정 커밋을 가리키도록 이동(--soft는 여기까지 수행)
             2. staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)
             3. working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)
        4. git reset으로 리셋된 커밋을 최신 커밋으로 돌리고 싶으면 리모트 레포지토리의 커밋을
                    git pull로 가져오면 된다.

 - git tag [태그이름] [커밋 아이디] : 특정 커밋에 태그를 붙임
 - git tag : 현재 태그를 모두 출력
 - git tag -m [지울 태그명] : 해당 태그명을 삭제