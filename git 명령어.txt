1. git 시작하기

 - git init : 현재 작업 중인 디렉토리를 working directory로 만든다. 특징으로는 .git라는 디렉토리가
	      숨김으로 생성된다.
 - git config user.name "codeit" : 현재 사용자의 아이디를 codeit으로 설정
 - git config user.email "codeit@codeit.kr" : 현재 사용자의 이메일 주소를 codeit@codeit.kr로 설정
 
 - git add [파일이름] : working directory안에 있는 수정사항이 있는 특정 파일을 staging area에 올린다.
 - git add [디렉토리명] : working directory안에 있는 수정사항이 있는 특정 폴더와
                                          아래의 모든 파일들을 staging area에 올린다.
 - git add . : working directory안에 있는 모든 수정사항이 있는 파일을 staging area에 올린다.
 - git reset [파일이름] : staging area에 올렸던 파일을 다시 내린다.
 - git status : Git이 현재 인식하고 있는 프로젝트 관련 내용을 출력한다.
 
 - git commit -m "커밋메시지" : 현제 git add 되어 staging area에 있는 것들을 커밋으로 넘긴다.
 - git help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 매뉴얼 출력. 
 - git push -u origin main : 내 컴퓨터에 있는 즉, 로컬 레포지토리의 내용을 맨 처음
                                                리모트 레포지토리(예.github)에 올릴 때 사용 한다.
 - git push : 처음이 올리는 경우가 아닐 때 로컬 레포지토리의 내용을 리모트 레포지토리에 보낸다.
 - git pull : 리모트 레포지토리의 내용을 로컬 레포지토리로 가져온다.
 - git clone [프로젝트 Github 상 주소] : Github에 있는 프로젝트를 내 컴퓨터로 가져온다.



2. git commit 다루기

 - git log : 커밋 히스토리를 출력
 - git log --pretty=oneline : 커밋 히스토리를 출력하는데 pretty옵션을 넣어 다양한 방식으로 출력가능
                                                  oneline으로 각 커밋 히스토리를 한 줄로 출력
 - git show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인
                          커밋 아이디는 git log로 커밋 히스토리에서 확인 가능
 - git commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦.
 - git commit alias.[별명] [커맨드] : 길이가 길어 쓰기 귀찮은 커맨들에 별명을 붙여 해당 별명으로
                                                             커맨드 실행 가능
 - git diff [커밋 A아이디] [커밋 B아이디] : 두 커밋 간의 차이 비교
 - git reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐.
                                 (옵션 생략시 자동적으로 --mixed 옵션이 적용 됨)
                                  특정 커밋아이디 대신 HEAD^(현재 커밋의 바로 전 커밋)이나,
                                                         HEAD~3(현재 커밋의 3단계 이전 커밋)도 사용가능
             1. HEAD가 특정 커밋을 가리키도록 이동(--soft는 여기까지 수행)
             2. staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)
             3. working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)
             4. git reset으로 리셋된 커밋을 최신 커밋으로 돌리고 싶으면 리모트 레포지토리의 커밋을
                git pull로 가져오면 된다.

 - git tag [태그이름] [커밋 아이디] : 특정 커밋에 태그를 붙임
 - git tag : 현재 태그를 모두 출력
 - git tag -d [지울 태그명] : 해당 태그명을 삭제



3. git branch 다루기


 - git branch [새 브랜치 이름] : 새로운 브랜치를 생성
 - git branch -d [기존 브랜치 이름] : 있던 브랜치 삭제
 - git checkout -b [새 브랜치 이름] : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동
 - git checkout [기존 브랜치 이름] : 그 브랜치로 이동
 - git merge [기존 브랜치 이름] : 현재 브랜치에 다른 브랜치를 머지(병합)
 - git merge --abort : 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감



 - 맨 처음 로컬 레포지토리를 github 같은 리모트 레포지토리로 push 할 때
     git remote add origin https://github.com/inab1822/Math_Box.git 
   이라는 명령어를 쳤다.
     맨 처음 리모트 레포지토리로 push 하기 위해서 새 리모트 레포지토리를 등록 하겠다는 뜻이다.
     "https://github.com/inab1822/Math_Box.git"라는 새 리모트 레포지토리를 
       origin이라는 이름으로 add(추가)한다. 라는 뜻이다. 굳이 origin이 아닌 임의의 이름도 되긴하지만
     git에서는 origin이라는 이름이 관례화 되어 있기 때문에 그냥 쓰자.
 
 - 그 다음 쳤던 
      git push -u origin main
   는 현재 로컬 레포지토리에 있는 main 브랜치의 내용 및 관련된 모든 커밋들을
     origin이라는 리모트 레포지토리로 보낸다는 뜻.
     이 때 origin이라는 리모트 레포지토리에 main이라는 브랜치가 없으면 main 브랜치를 자동 생성 후 푸시.
     그리고 옵션인 "-u"는 --set-upstream이라는 옵션의 약자로써
     로컬 레포지토리 main 브랜치가 origin에 있는 main 브랜치를 추적하는 걸로 설정.
     이렇게 추적하는걸로 설정해 놓으면 추후 다시 push할때
     "git push" 만 해줘도 자동으로 추적 중인 리모트 레포지토리 main 브랜치를 대상으로 push됨
     "git pull" 도 마찬가지.
     만약 "-u"를 해주지 않으면 추후 psuh 할 때,
     "git push origin main:main" 을 쳐야 하는데
     여기서 origin은 리모트 레포지토리를 말하고, 처음 나오는 main은 로컬 레포지토리의 main 브랜치
     나중에 나오는 main은 리모트 레포지토리의 main브랜치 이다.
     꽤 귀찮기 때문에 처음 remote 정할 때 "-u" 옵션을 설정해 주자.

 - git reset은 HEAD와 HEAD가 보고있는 브랜치가 같이 이동하지만,
     git checkout은 브랜치를 보고 있는 HEAD만 이동된다.
     즉, 현재 우리가 보고있는 커밋은 HEAD가 main(브랜치이름)을 통해 간접적으로 보고있는 상황이다.


 - git checkout [커밋 아이디] : 기존에 [브랜치]를 썻을 때 HEAD가 다른 브랜치를 가리켰다면,
                                                [커밋 아이디]를 쓰면 HEAD만 이전 커밋을 가리키게 된다.
                                                이렇게 하는 이유는 이전 커밋에서 다른 브랜치를 만들고 싶을 때 쓴다.
                                                즉 git checkout 커맨드는 HEAD가 커밋을 직접 가리킬 수도 브랜치를
                                                직접 가리킬 수도 있다. 



 - git fetch : 리모트 레포지토리에서 가져온 브랜치의 내용을 머지하기 젆에 점검할때 쓴다.
                         "git pull"은 리모트 레포지토리에서 가져온 브랜치의 내용을 자동으로 merge 하지만
                         "git fetch"는 가져오기만 하고 merge하지는 않는다.

